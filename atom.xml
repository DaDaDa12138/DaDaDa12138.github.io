<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dadada12138.github.io</id>
    <title>Hello World</title>
    <updated>2019-12-31T05:39:41.663Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dadada12138.github.io"/>
    <link rel="self" href="https://dadada12138.github.io/atom.xml"/>
    <subtitle>迷失的人迷失了，相逢的人会再相逢
</subtitle>
    <logo>https://dadada12138.github.io/images/avatar.png</logo>
    <icon>https://dadada12138.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Hello World</rights>
    <entry>
        <title type="html"><![CDATA[How To Remove Docker Images, Containers, and Volumes]]></title>
        <id>https://dadada12138.github.io/post/how-to-remove-docker-images-containers-and-volumes</id>
        <link href="https://dadada12138.github.io/post/how-to-remove-docker-images-containers-and-volumes">
        </link>
        <updated>2019-12-30T13:39:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="how-to-remove-docker-images-containers-and-volumes">How To Remove Docker Images, Containers, and Volumes</h1>
<h2 id="a-docker-cheat-sheet">A Docker Cheat Sheet</h2>
<h3 id="introduction">Introduction</h3>
<p>Docker makes it easy to wrap your applications and services in containers so<br>
you can run them anywhere. As you work with Docker, however, it’s also easy to<br>
accumulate an excessive number of unused images, containers, and data volumes<br>
that clutter the output and consume disk space.</p>
<p>Docker gives you all the tools you need to clean up your system from the<br>
command line. This cheat sheet-style guide provides a quick reference to<br>
commands that are useful for freeing disk space and keeping your system<br>
organized by removing unused Docker images, containers, and volumes.</p>
<p><strong>How to Use This Guide:</strong></p>
<ul>
<li>This guide is in cheat sheet format with self-contained command-line snippets</li>
<li>Jump to any section that is relevant to the task you are trying to complete.</li>
</ul>
<p>The command substitution syntax, <code>command $(command)</code>, used in the commands is<br>
available in many popular shells such as bash, zsh, and Windows Powershell.</p>
<h2 id="purging-all-unused-or-dangling-images-containers-volumes-and-networks">Purging All Unused or Dangling Images, Containers, Volumes, and Networks</h2>
<p>Docker provides a single command that will clean up any resources — images,<br>
containers, volumes, and networks — that are dangling (not associated with a<br>
container):</p>
<pre><code>      * docker system prune
</code></pre>
<p>To additionally remove any stopped containers and all unused images (not just<br>
dangling images), add the <code>-a</code> flag to the command:</p>
<pre><code>      * docker system prune -a
</code></pre>
<h2 id="removing-docker-images">Removing Docker Images</h2>
<h3 id="remove-one-or-more-specific-images">Remove one or more specific images</h3>
<p>Use the <code>docker images</code> command with the <code>-a</code> flag to locate the ID of the<br>
images you want to remove. This will show you every image, including<br>
intermediate image layers. When you’ve located the images you want to delete,<br>
you can pass their ID or tag to <code>docker rmi</code>:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker images -a
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker rmi Image Image
</code></pre>
<h3 id="remove-dangling-images">Remove dangling images</h3>
<p>Docker images consist of multiple layers. Dangling images are layers that have<br>
no relationship to any tagged images. They no longer serve a purpose and<br>
consume disk space. They can be located by adding the filter flag, <code>-f</code> with a<br>
value of <code>dangling=true</code> to the <code>docker images</code> command. When you’re sure you<br>
want to delete them, you can use the <code>docker images purge</code> command:</p>
<p><strong>Note:</strong> If you build an image without tagging it, the image will appear on<br>
the list of dangling images because it has no association with a tagged image.<br>
You can avoid this situation by [providing a<br>
tag](https://docs.docker.com/engine/reference/commandline/build/#/tag-image--<br>
t) when you build, and you can retroactively tag an images with the <a href="https://docs.docker.com/engine/reference/commandline/tag/">docker<br>
tag</a> command.</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker images -f dangling=true
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker images purge
</code></pre>
<h3 id="removing-images-according-to-a-pattern">Removing images according to a pattern</h3>
<p>You can find all the images that match a pattern using a combination of<br>
<code>docker images</code> and<br>
[<code>grep</code>](https://www.digitalocean.com/community/tutorials/using-grep-regular-<br>
expressions-to-search-for-text-patterns-in-linux). Once you’re satisfied, you<br>
can delete them by using <code>awk</code> to pass the IDs to <code>docker rmi</code>. Note that<br>
these utilities are not supplied by Docker and are not necessarily available<br>
on all systems:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker images -a |  grep &quot;pattern&quot;
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker images -a | grep &quot;pattern&quot; | awk '{print $3}' | xargs docker rmi
</code></pre>
<h3 id="remove-all-images">Remove all images</h3>
<p>All the Docker images on a system can be listed by adding <code>-a</code> to the <code>docker images</code> command. Once you’re sure you want to delete them all, you can add the<br>
<code>-q</code> flag to pass the Image ID to <code>docker rmi</code>:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker images -a
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker rmi $(docker images -a -q)
</code></pre>
<h2 id="removing-containers">Removing Containers</h2>
<h3 id="remove-one-or-more-specific-containers">Remove one or more specific containers</h3>
<p>Use the <code>docker ps</code> command with the <code>-a</code> flag to locate the name or ID of the<br>
containers you want to remove:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker ps -a
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker rm ID_or_Name ID_or_Name
</code></pre>
<h3 id="remove-a-container-upon-exit">Remove a container upon exit</h3>
<p>If you know when you’re creating a container that you won’t want to keep it<br>
around once you’re done, you can run <code>docker run --rm</code> to automatically delete<br>
it when it exits.</p>
<p><strong>Run and Remove:</strong></p>
<pre><code>      *  docker run --rm image_name
</code></pre>
<h3 id="remove-all-exited-containers">Remove all exited containers</h3>
<p>You can locate containers using <code>docker ps -a</code> and filter them by their<br>
status: created, restarting, running, paused, or exited. To review the list of<br>
exited containers, use the <code>-f</code> flag to filter based on status. When you’ve<br>
verified you want to remove those containers, using <code>-q</code> to pass the IDs to<br>
the <code>docker rm</code> command.</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker ps -a -f status=exited
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker rm $(docker ps -a -f status=exited -q)
</code></pre>
<h3 id="remove-containers-using-more-than-one-filter">Remove containers using more than one filter</h3>
<p>Docker filters can be combined by repeating the filter flag with an additional<br>
value. This results in a list of containers that meet either condition. For<br>
example, if you want to delete all containers marked as either <strong>Created</strong> (a<br>
state which can result when you run a container with an invalid command) or<br>
<strong>Exited</strong> , you can use two filters:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker ps -a -f status=exited -f status=created
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker rm $(docker ps -a -f status=exited -f status=created -q)
</code></pre>
<h3 id="remove-containers-according-to-a-pattern">Remove containers according to a pattern</h3>
<p>You can find all the containers that match a pattern using a combination of<br>
<code>docker ps</code> and [grep](https://www.digitalocean.com/community/tutorials/using-<br>
grep-regular-expressions-to-search-for-text-patterns-in-linux). When you’re<br>
satisfied that you have the list you want to delete, you can use <code>awk</code> and<br>
<code>xargs</code> to supply the ID to <code>docker rmi</code>. Note that these utilities are not<br>
supplied by Docker and not necessarily available on all systems:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker ps -a |  grep &quot;pattern”
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker ps -a | grep &quot;pattern&quot; | awk '{print $3}' | xargs docker rmi
</code></pre>
<h3 id="stop-and-remove-all-containers">Stop and remove all containers</h3>
<p>You can review the containers on your system with <code>docker ps</code>. Adding the <code>-a</code><br>
flag will show all containers. When you’re sure you want to delete them, you<br>
can add the <code>-q</code> flag to supply the IDs to the <code>docker stop</code> and <code>docker rm</code><br>
commands:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker ps -a
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker stop $(docker ps -a -q)

  * docker rm $(docker ps -a -q)
</code></pre>
<h2 id="removing-volumes">Removing Volumes</h2>
<h3 id="remove-one-or-more-specific-volumes-docker-19-and-later">Remove one or more specific volumes - Docker 1.9 and later</h3>
<p>Use the <code>docker volume ls</code> command to locate the volume name or names you wish<br>
to delete. Then you can remove one or more volumes with the <code>docker volume rm</code><br>
command:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker volume ls
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker volume rm volume_name volume_name
</code></pre>
<h3 id="remove-dangling-volumes-docker-19-and-later">Remove dangling volumes - Docker 1.9 and later</h3>
<p>Since the point of volumes is to exist independent from containers, when a<br>
container is removed, a volume is not automatically removed at the same time.<br>
When a volume exists and is no longer connected to any containers, it’s called<br>
a dangling volume. To locate them to confirm you want to remove them, you can<br>
use the <code>docker volume ls</code> command with a filter to limit the results to<br>
dangling volumes. When you’re satisfied with the list, you can remove them all<br>
with <code>docker volume prune</code>:</p>
<p><strong>List:</strong></p>
<pre><code>      *  docker volume ls -f dangling=true
</code></pre>
<p><strong>Remove:</strong></p>
<pre><code>      *  docker volume prune
</code></pre>
<h3 id="remove-a-container-and-its-volume">Remove a container and its volume</h3>
<p>If you created an unnamed volume, it can be deleted at the same time as the<br>
container with the <code>-v</code> flag. Note that this only works with <em>unnamed</em><br>
volumes. When the container is successfully removed, its ID is displayed. Note<br>
that no reference is made to the removal of the volume. If it is unnamed, it<br>
is silently removed from the system. If it is named, it silently stays<br>
present.</p>
<p><strong>Remove:</strong></p>
<pre><code>     *  docker rm -v container_name
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://dadada12138.github.io/post/hello-gridea</id>
        <link href="https://dadada12138.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>